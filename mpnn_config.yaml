#PHASES allows one to control different phases of the pipeline
Phases:
  #Phase 1: Get PDBs, clean them up, and fast relax them
  Phase1: False
  #Phase 2: Run MPNN
  Phase2: False
  #Phase 3: Clean up the MPNN output for ddg calculation and energetic analysis
  Phase3: True
  #Phase 4: Design the top N fibrils with the lowest energetics
  Phase4: False
  #Phase 5: Run Upside on the top N fibrils
  #FILE 2_run_upside.py
  Phase5: False

### Overall Setting
filepath:
  conda_env_path: "/endosome/work/CAND/shared/Chens/miniforge3/envs/upside2"
  out_folder: "/work/CAND/shared/Chens/AD_fibrils/AD_redesign"  # Path to output sequences folder
  energetic_calculation_path: "/work/CAND/shared/Chens/AD_fibrils/AD_redesign/energetics_calculation"
  proteinMPNN_path: "/work/CAND/shared/Chens/AD_fibrils/ProteinMPNN"
  #Could use all three it will just gather them together
  data_bank_pdb_name: "6HRE" #Names of the PDB file to be designed, could be directly from the pdb data bank
  #"1a42, 1a43, 1a44"
  pdb_path: ""  # Path to a single PDB to be designed
  pdb_folder_path: ""  # Path to a folder with PDB files to be designed

# Phase 1
### Renaming Chains and residues, retaining only one fibril, adding layers, fast relax
pdb_clean_up:
  layers: 5  # Number of layers in the fibril, program can add or delete layers automatically
  fast_relax: True  # Flag to use fast relax to clean up the PDB

# Phase 2
### MPNN Model Setting
mpnn_model_config:
  ##Very important, should be changed
  chains_to_design: "A B C D E"  # Define which chains need to be designed for a single PDB
  #Specify the positions to design, if this is specifcied then fixed_positions and tied_positions 
  #SHOULD NOT be specified
  #since they will be generated automatically
  positions_to_design: "3 5 7 9 11 15 17 19 22 25 27 29 34 36 38 41 43 47 51 54 56 58 60 65 67 69 71 73 75" #"9 10 11, 10 11 22"
  fixed_positions: "" #"9 10 11, 10 11"
  tied_positions: "" #"1 2 3 4, 1 2 3 4 " #two list must match in length; residue 1 in chain A and C will be sampled togther;
  omit_AAs: ""  # Amino acids to omit from generated sequence

  num_seq_per_target: 2000  # Number of sequences to generate per target
  batch_size: 8  # Batch size; reduce if running out of GPU memory
  sampling_temp: ["0.3", "0.5", "0.7"] # Sampling temperature for amino acids (0.1-0.3 recommended)


  #Not as important, can be changed
  ca_only: false  # Parse CA-only structures and use CA-only models
  use_soluble_model: false  # Flag to load ProteinMPNN weights trained on soluble proteins only
  seed: 42  # If set to 0 then a random seed will be picked
  save_score: 0  # 0 for False, 1 for True; save score=-log_prob to npy files
  path_to_fasta: ""  # Score provided input sequence in fasta format; e.g. GGGGGG/PPPPS/WWW for chains A,B,C
  save_probs: 0  # 0 for False, 1 for True; save MPNN predicted probabilities per position
  score_only: 0  # 0 for False, 1 for True; score input backbone-sequence pairs
  conditional_probs_only: 0  # 0 for False, 1 for True; output conditional probabilities
  conditional_probs_only_backbone: 0  # 0 for False, 1 for True; output backbone conditional probabilities
  unconditional_probs_only: 0  # 0 for False, 1 for True; output unconditional probabilities
  backbone_noise: .2  # Standard deviation of Gaussian noise to add to backbone atoms
  bias_AA_jsonl: ""  # Path to dictionary for AA composition bias
  bias_by_res_jsonl: ""  # Path to dictionary with per position bias
  omit_AA_jsonl: ""  # Path to dictionary specifying AAs to omit at specific positions
  pssm_jsonl: ""  # Path to dictionary with PSSM
  pssm_multi: 0.0  # Weight between MPNN and PSSM (0.0-1.0)
  pssm_threshold: 0.0  # Threshold for restricting per position AAs
  pssm_log_odds_flag: 0  # 0 for False, 1 for True
  pssm_bias_flag: 0  # 0 for False, 1 for True
  tied_positions_jsonl: ""  # Path to dictionary with tied positions

#Phase 3, clean up the MPNN output by removing duplicates and making them individual fasta
#for ddg calculation and energetic analysis
mpnn_cleaning:
  proteins: ["7YMN_5_min"]
  temperatures: ["0.3", "0.5", "0.7", "1.0"]

  energy_calculation:
    #copy sampling temperature above unless you want to only do specific temperature
    output_path: "/work/CAND/shared/Chens/AD_fibrils/Testing/energetics_calculation"

#Phase 4, design the top N fibrils with the lowest energetics
fibril_design:
  proteins: ["7YMN_5_min"]
  N_fibrils: 15
  output_path: "/work/CAND/shared/Chens/AD_fibrils/AD_redesign"

#Phase 5, run upside on the top N fibrils
#FILE 2_run_upside.py
upside_simulation:
  userid: "s229066"
  #sinfo | grep idle to find what cpus are available for faster queue
  #upside works with anything above 256GB
  partition: "256GBv2*"
  upside_path: "/work/CAND/shared/Chens/upside2-md"
  proteins: ["7YMN_5_min"]
  output_path: "/work/CAND/shared/Chens/AD_fibrils/AD_redesign"
  n_reps: 10
  n_steps: 100000