# MPNN Pipeline Configuration
# This file controls the protein design pipeline using ProteinMPNN & Upside

# PIPELINE PHASES
# Control which phase of the pipeline to run (only one can be active at a time)
Phases:
  # Phase 1: Prepare PDBs - clean structures and perform fast relaxation
  Phase1: False
  
  # Phase 2: Run ProteinMPNN to generate designed sequences
  Phase2: True
  
  # Phase 3: Process MPNN outputs for energy calculation and analysis
  Phase3: False
  
  # Phase 4: Select and refine top N fibril designs based on energetics
  Phase4: False
  
  # Phase 5: Run Upside molecular dynamics simulations on top designs
  Phase5: False

# GLOBAL SETTINGS
filepath:
  # Path to conda environment containing required dependencies
  conda_env_path: "/endosome/work/CAND/shared/Chens/miniforge3/envs/upside2"
  
  # Directory where all output files will be saved
  out_folder: "/work/CAND/shared/Chens/AD_fibrils/AD_redesign"
  
  # Path to ProteinMPNN installation
  proteinMPNN_path: "/work/CAND/shared/Chens/AD_fibrils/ProteinMPNN"

  # Input PDB specification (use one of the three options below)
  data_bank_pdb_name: "6HRE"  # PDB ID to download from PDB database
  pdb_path: ""                # Path to a single PDB file
  pdb_folder_path: ""         # Path to a folder containing multiple PDB files

# PHASE 1 SETTINGS: PDB PREPARATION
pdb_clean_up:
  # Number of layers to include in the fibril structure
  layers: 5
  
  # Whether to perform Rosetta FastRelax to optimize the structure
  fast_relax: True

# PHASE 2 SETTINGS: PROTEINMPNN DESIGN
mpnn_model_config:
  # DESIGN SPECIFICATION
  # Space-separated list of chains to redesign
  chains_to_design: "A B C D E"
  
  # Specific positions to redesign (space-separated residue numbers)
  # If specified, fixed_positions and tied_positions should be left empty
  # Recommend to find the positions based by selecting the residues in pymol then
  # printing the residue numbers using the command: iterate selected and name CA, print (resi, resn)
  # then copy the ouptut to gpt and ask it to give you the residue numbers in a list format separated by spaces

  positions_to_design: "3 5 7 9 11 15 17 19 22 25 27 29 34 36 38 41 43 47 51 54 56 58 60 65 67 69 71 73 75"
  
  # Positions to keep fixed (not used if positions_to_design is specified)
  fixed_positions: ""
  
  # Positions to design with identical amino acids (not used if positions_to_design is specified)
  # Format: "1 2 3 4, 1 2 3 4" means positions 1,2,3,4 in first chain set will match 1,2,3,4 in second set
  tied_positions: ""
  
  # Amino acids to exclude from the design
  omit_AAs: ""

  # SAMPLING PARAMETERS
  # Number of sequences to generate per target structure
  num_seq_per_target: 2000
  
  # Batch size for inference (reduce if running out of GPU memory)
  batch_size: 8
  
  # Sampling temperatures to control design diversity
  # Lower values (0.1-0.3) produce more conservative designs
  # Higher values produce more diverse designs
  sampling_temp: ["0.01", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8","0.9","1.0","10.0"]

  # ADVANCED OPTIONS
  ca_only: false                  # Use CA-only models instead of full-atom models
  use_soluble_model: false        # Use weights trained only on soluble proteins
  seed: 42                        # Random seed (0 for random)
  save_score: 1                   # Save sequence scores (-log probability)
  path_to_fasta: ""               # Path to input sequences for scoring
  save_probs: 1                   # Save per-position amino acid probabilities
  score_only: 0                   # Only score input sequences without generating new ones
  conditional_probs_only: 0       # Output conditional probabilities only
  conditional_probs_only_backbone: 0  # Output backbone conditional probabilities
  unconditional_probs_only: 0     # Output unconditional probabilities
  backbone_noise: .2              # Add Gaussian noise to backbone atoms
  
  # BIAS CONTROL OPTIONS
  bias_AA_jsonl: ""               # Path to AA composition bias dictionary
  bias_by_res_jsonl: ""           # Path to position-specific bias dictionary
  omit_AA_jsonl: ""               # Path to position-specific AA exclusion dictionary
  pssm_jsonl: ""                  # Path to PSSM (Position-Specific Scoring Matrix)
  pssm_multi: 0.0                 # Weight between MPNN and PSSM (0.0-1.0)
  pssm_threshold: 0.0             # Threshold for restricting per-position AAs
  pssm_log_odds_flag: 0           # Use log odds in PSSM
  pssm_bias_flag: 0               # Use PSSM as bias
  tied_positions_jsonl: ""        # Path to tied positions dictionary

# PHASE 3 SETTINGS: OUTPUT PROCESSING
mpnn_cleaning:
  # List of protein structures to process
  proteins: ["6HRE_5_min"]
  
  # Temperature values to process (subset of sampling_temp from Phase 2)
  temperatures: ["0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0"]

  # Energy calculation settings
  energy_calculation:
    # Output path for energy calculation results
    output_path: "/work/CAND/shared/Chens/AD_fibrils/Testing/energetics_calculation"

# PHASE 4 SETTINGS: TOP DESIGN SELECTION
fibril_design:
  # List of protein structures to process
  proteins: ["7YMN_5_min"]
  
  # Number of top designs to select based on energetics
  N_fibrils: 15
  
  # Output path for selected designs
  output_path: "/work/CAND/shared/Chens/AD_fibrils/AD_redesign"

# PHASE 5 SETTINGS: UPSIDE MOLECULAR DYNAMICS
upside_simulation:
  # User ID for cluster submission
  userid: "s229066"
  
  # Compute partition for job submission
  # Use "sinfo | grep idle" to find available resources
  partition: "256GBv2*"
  
  # Path to Upside MD installation
  upside_path: "/work/CAND/shared/Chens/upside2-md"
  
  # List of protein structures to simulate
  proteins: ["7YMN_5_min"]
  
  # Output path for simulation results
  output_path: "/work/CAND/shared/Chens/AD_fibrils/AD_redesign"
  
  # Number of independent simulation replicas
  n_reps: 10
  
  # Number of simulation steps per replica
  n_steps: 100000